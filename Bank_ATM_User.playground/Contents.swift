import UIKit

// MARK: - Task Description: -
//    1. –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º –¥–µ–ø–æ–∑–∏—Ç–µ:
//      a. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–∏: –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã + –ø–∏–Ω–∫–æ–¥
//      –±. –ë–∞–Ω–∫ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ:
//          –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –í–∞–ª–µ—Ä–∏–π –ï–≤–≥–µ–Ω—å–µ–≤–∏—á. –í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –±–∞–ª–∞–Ω—Å. –í–∞—à –±–∞–ª–∞–Ω—Å –•. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!

//    2. –°–Ω—è—Ç–∏–µ –Ω–∞–ª–∏—á–Ω—ã—Ö —Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞:
//      a. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–∏: –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã + –ø–∏–Ω–∫–æ–¥
//      –±. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –∫–∞–∫—É—é —Ç–æ —Å—É–º–º—É –¥–µ–Ω–µ–≥, —ç—Ç–∞ —Å—É–º–º–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å –µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–Ω—ã–π —Å—á–µ—Ç, —Ç.–µ. –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤—É –¥–µ–Ω–µ–≥ –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–µ, –∏ –µ—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—É–º–º–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ç–æ –±–∞–Ω–∫–æ–º–∞—Ç –¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ª–∏—á–Ω—ã–µ.
//      –≤. –ë–∞–Ω–∫ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ:
//    –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –ò–º—è –ü–æ–ª—å–∑ –≤—ã –≤—ã–±—Ä–∞–ª–∏ —Å–Ω—è—Ç–∏–µ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç–∏, –≤–∞—à–∞ —Å—É–º–º–∞ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–µ —É–º–µ–Ω—å—à–∏–ª–∞—Å—å –Ω–∞ –• –∏ –Ω–∞–ª–∏—á–Ω—ã–µ —É–≤–µ–ª–∏—á–∏–ª–∏—Å—å –Ω–∞ —Å—Ç–æ–ª—å–∫–æ —Ç–æ...
    
//    3. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏:
//      a. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–∏: –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã + –ø–∏–Ω–∫–æ–¥
//      –±. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞–ª–∏—á–Ω—ã—Ö. –ú–æ–∂–µ–º –ª–∏ —Å—Ç–æ–ª—å–∫–æ –≤–Ω–µ—Å—Ç–∏? –°—É–º–º–∞ –∫–æ—Ç–æ—Ä—É—é –≤–Ω–æ—Å–∏–º –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å –∏–º–µ—é—â—É—é—Å—è –Ω–∞–ª–∏—á–Ω–æ—Å—Ç—å.
//      –≤. –ë–∞–Ω–∫ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ:
//      –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–Ω–æ–ø–∫–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–∞–∂–∞–ª–∏, –≤–∞—à–∞ —Å—É–º–º–∞ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–µ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –Ω–∞ –• –∏ –Ω–∞–ª–∏—á–Ω—ã–µ —É–º–µ–Ω—å—à–∏–ª–∏—Å—å –Ω–∞ —Å—Ç–æ–ª—å–∫–æ —Ç–æ...
    
//    4. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ —Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞:
//      a. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–∏: –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã + –ø–∏–Ω–∫–æ–¥
//      –±. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–∏ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:
//      –≤. –£—Ç–æ—á–Ω—è–µ—Ç—Å—è –æ—Ç –∫—É–¥–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω: –° –¥–µ–ø–æ–∑–∏—Ç–∞ –∏–ª–∏ —Å –Ω–∞–ª–∏—á–Ω—ã—Ö:
//      –≥. –ë–∞–Ω–∫ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ:
//          –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ –• —Å—É–º–º—É —á–µ—Ä–µ–∑ –Ω–∞–ª–∏—á–Ω—ã–µ/—Å –¥–µ–ø–æ–∑–∏—Ç–∞. –£ –≤–∞—Å —Å–ø–∏—Å–∞–ª–æ—Å—å —Å –¥–µ–ø–æ–∑–∏—Ç–∞/—Å –Ω–∞–ª–∏—á–Ω—ã—Ö –∏ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.

//ToDo: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –Ω–µ–π–º–∏–Ω–≥–æ–º: –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤—Å–µ —Å–ª–æ–∂–Ω—ã–µ –∏–ª–∏ –¥–≤—É—Å–º—ã—Å–ª–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è. (–û—Å—É—â–µ—Å—Ç–≤–∏–º–æ –µ—Å–ª–∏ –Ω–∞—á–∞—Ç—å –ø–µ—Ä–µ–∏–º–∏–Ω–æ–≤—ã–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –º–µ—Ç–æ–¥–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–¥–∞–Ω–∏–∏ –∏–∑ –Ω–∞—á–∞–ª–∞)

// MARK: - Protocols: -
// MARK: –û–ø–∏—Å–∞–Ω–∏–µ ¬´–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è¬ª :
protocol UserData {
  var userName: String { get }           //–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  var userCardId: String { get }         //–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
  var userCardPin: Int { get }           //–ü–∏–Ω-–∫–æ–¥
  var userCash: Float { get set}         //–ù–∞–ª–∏—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  var userBankDeposit: Float { get set}  //–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –¥–µ–ø–æ–∑–∏—Ç
  var userPhone: String { get }          //–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  var userPhoneBalance: Float { get set} //–±–∞–ª–∞–Ω—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞
}

// MARK: –û–ø–∏—Å–∞–Ω–∏–µ ¬´—Å–µ—Ä–≤–µ—Ä–∞¬ª :
// –ü—Ä–æ—Ç–æ–∫–æ–ª –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–∞–Ω–∫–æ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤ –±–∞–Ω–∫–µ
protocol BankApi {
    
//    –§—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–≤–æ–µ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ª–æ–≥–∏–∫–æ–π –Ω–µ –æ–±–ª–∞–¥–∞—é—Ç!)
  func showUserBalance() // –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–ª–∞–Ω—Å–µ
  func showUserToppedUpMobilePhoneCash(cash: Float) // —Å–∫–æ–ª—å–∫–æ –∫–µ—à–∞ –ø–æ–ª–æ–∂–∏–ª–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω, –±–∞–Ω–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  func showUserToppedUpMobilePhoneDeposite(deposit: Float) // —Å–∫–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏–ª–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –¥–µ–ø–æ–∑–∏—Ç –±–∞–Ω–∫–∞, –±–∞–Ω–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  func showWithdrawalDeposit(cash: Float) // –ü–æ–∫–∞–∑–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω—è–ª —Å –¥–µ–ø–æ–∑–∏—Ç–∞
  func showTopUpAccount(cash: Float) // –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø–æ–ª–Ω–∏–ª –¥–µ–ø–æ–∑–∏—Ç
  func showError(error: TextErrors) // –ú–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—à–∏–±–∫–∏. –û–±–µ—Ä–Ω—É—Ç—å –í—Å–µ –æ—à–∏–∫–∏ –≤ –æ–¥–∏–Ω –º–µ—Ç–æ–¥.
 
//    –§—É–Ω–∫—Ü–∏–∏ —Å–æ —Å–≤–æ–µ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ª–æ–≥–∏–∫–æ–π:
  func checkUserPhone(phone: String) -> Bool // –ë–∞–Ω–∫ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª–Ω—ã–π —Ç–æ —Ñ–æ–ª—Å
  func checkMaxUserCash(cash: Float) -> Bool // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ –∫–∞—Ä–º–∞–Ω–µ. –ú–æ–∂–µ–º –ª–∏ –∑–∞–ø–ª–∞—Ç–∏—Ç—å —Å—Ç–æ–ª—å–∫–æ —Å–∫–æ–ª—å–∫–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∫—ç—à
  func checkMaxAccountDeposit(withdraw: Float) -> Bool // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–µ. –ú–æ–∂–µ–º –ª–∏ —Å–Ω—è—Ç—å —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É
  func checkCurrentUser(userCardId: String, userCardPin: Int) -> Bool // –ú–µ—Ç–æ–¥ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

//    –ú–µ—Ç–æ–¥—ã –æ—Ç–≤–µ—á–∞—é—â–∏–µ –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –≤—Å–µ—Ö —É–¥–∞—á–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫, –∏ –æ–Ω–∏ –æ—Ç–≤–µ—á–∞—é –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö  –Ω–∞—á–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Æ–∑–µ—Ä–∞, —Ç–æ –µ—Å—Ç—å —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å –µ–≥–æ –¥–∞–Ω–Ω—ã–º–∏.
//    ToDo: –í—Å–ø–æ–º–Ω–∏—Ç—å —á—Ç–æ —Ç–∞–∫–æ–µ –º—É—Ç–∞—Ç–∏–Ω–∫ –º–µ—Ç–æ–¥—ã –∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –¥–ª—è —á–µ–≥–æ –æ–Ω–∏ –Ω—É–∂–Ω—ã –∑–¥–µ—Å—å
// –í—Ä–æ–¥–µ –∫–∞–∫ –º—É—Ç–∞—Ç–∏–Ω–≥ –Ω—É–∂–µ–Ω –µ—Å–ª–∏ —é–∑–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –µ—Å–ª–∏ –≤—Å–µ –Ω–∞ –∫–ª–∞—Å—Å–∞—Ö, —Ç–æ–≥–¥–∞ –º—É—Ç–∞—Ç–∏–Ω–≥ –∫–∞–∫ –±—ã –∏ –Ω–µ –ø—Ä–∏—á–µ–º –∑–¥–µ—Å—å
    
//    TODO: –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –Ω–∞ –≤–µ—Ä—Ö, –Ω–∞–≤–µ—Å—Ç–∏ –≤ –Ω–∏—Ö –ø–æ—Ä—è–¥–æ–∫ —á—Ç–æ–± —É–±–æ—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏ –∞ —Ç–µ —á—Ç–æ –Ω–∞–¥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–∏—Ç—å –∫—Ä–∞—Å–∏–≤–æ –∏ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ
  mutating func topUpPhoneBalanceCash(pay: Float) // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ–≥–æ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–∞ –∫–µ—à–∞
  mutating func topUpPhoneBalanceDeposit(pay: Float) // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ–≥–æ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–µ
  mutating func getCashFromDeposit(cash: Float) // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–µ –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–µ—à–∞
  mutating func putCashDeposit(topUp: Float) // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–µ—à–∞ –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–µ
}

// MARK: - Enums: -
// –î–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å –≤ –±–∞–Ω–∫–æ–º–∞—Ç–µ (–∏–º–∏—Ç–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫)
enum UserActions {
    case userPressedBalanceBtn //–ó–∞–ø—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å
    case userPressedCashWithdrawalBtn(cash: Float)   //–°–Ω—è—Ç—å –Ω–∞–ª–∏—á–Ω—ã–µ
    case userPressedTopUpBankDepositBtn(cash: Float) //–ü–æ–ª–æ–∂–∏—Ç—å –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç
    case userPressedTopUpPhoneBalanceBtn(phoneNumber: String,
                                         payment: PaymentMethod,
                                         amount: Float) //–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ
}

// –í–∏–¥—ã –æ–ø–µ—Ä–∞—Ü–∏–π, –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞)
enum DescriptionTypesAvailableOperations: String {
    case queryBalance = "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º –¥–µ–ø–æ–∑–∏—Ç–µ."
    case queryToppedUpMobilePhoneCash = "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏."
    case queryToppedUpMobilePhoneDeposite = "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞."
    case queryWithdrawalDeposit = "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–Ω—è—Ç–∏–µ –Ω–∞–ª–∏—á–Ω—ã—Ö —Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞."
    case queryTopUpAccount = "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏."
}

// –¢–µ–∫—Å—Ç—ã –æ—à–∏–±–æ–∫
enum TextErrors: String {
    case wrongLogin = "‚ùóÔ∏è–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ PIN. üü£"
    case wrongPhoneNr = "‚ùóÔ∏è–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. üîµ"
    case notEnoughtCash = "‚ùóÔ∏è–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–ª–∏—á–Ω—ã—Ö. üü°"
    case tooLowDeposite = "‚ùóÔ∏è–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É –í–∞—Å –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–µ. üü†"
    case notEnoughtCashForPhone = "‚ùóÔ∏è–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–ª–∏—á–Ω—ã—Ö –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. üî¥"
    case tooLowDepositeForPhone = "‚ùóÔ∏è–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É –í–∞—Å –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. üü§"
}

// –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã/–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ –¥–µ–ø–æ–∑–∏—Ç
enum PaymentMethod {
    case byCash
    case fromDeposite
}

// MARK: - Classes: -
class User: UserData {
    var userName: String
    var userCardId: String
    var userCardPin: Int
    var userCash: Float
    var userBankDeposit: Float
    var userPhone: String
    var userPhoneBalance: Float
    
    init(userName: String,
         userCardId: String,
         userCardPin: Int,
         userCash: Float,
         userBankDeposit: Float,
         userPhone: String,
         userPhoneBalance: Float) {
        self.userName = userName
        self.userCardId = userCardId
        self.userCardPin = userCardPin
        self.userCash = userCash
        self.userBankDeposit = userBankDeposit
        self.userPhone = userPhone
        self.userPhoneBalance = userPhoneBalance
    }
}

class Bank: BankApi {
    
    private var user: User
    
    init(user: User){
        self.user = user
    }
    
    func showUserBalance() {
        let report = """
            –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, \(user.userName),
            \(DescriptionTypesAvailableOperations.queryBalance.rawValue)
            –ë–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: \(user.userBankDeposit) —Ä—É–±–ª–µ–π.
            –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!
            """
        print(report)
    }
    
    func showUserToppedUpMobilePhoneCash(cash: Float) {
        let report = """
            –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, \(user.userName),
            \(DescriptionTypesAvailableOperations.queryToppedUpMobilePhoneCash.rawValue)
            –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –Ω–∞ —Å—É–º–º—É: \(cash) —Ä—É–±–ª–µ–π.
            –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å \(user.userCash) —Ä—É–±–ª–µ–π –Ω–∞–ª–∏—á–Ω—ã–º–∏.
            –ë–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: \(user.userPhoneBalance) —Ä—É–±–ª–µ–π.
            –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!
            """
        print(report)
    }
    
    func showUserToppedUpMobilePhoneDeposite(deposit: Float) {
        let report = """
            –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, \(user.userName),
            \(DescriptionTypesAvailableOperations.queryToppedUpMobilePhoneDeposite.rawValue)
            –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ —Å—É–º–º—É: \(deposit) —Ä—É–±–ª–µ–π.
            –ù–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º –¥–µ–ø–æ–∑–∏—Ç–µ —É –í–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å \(user.userBankDeposit) —Ä—É–±–ª–µ–π.
            –ë–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: \(user.userPhoneBalance) —Ä—É–±–ª–µ–π.
            –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!
            """
        print(report)
    }
    
    func showWithdrawalDeposit(cash: Float) {
        let report = """
            –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, \(user.userName),
            \(DescriptionTypesAvailableOperations.queryWithdrawalDeposit.rawValue)
            –í–∞–º –≤—ã–¥–∞–Ω–æ \(cash) —Ä—É–±–ª–µ–π –Ω–∞–ª–∏—á–Ω—ã–º–∏.
            –ù–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º –¥–µ–ø–æ–∑–∏—Ç–µ —É –í–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å \(user.userBankDeposit) —Ä—É–±–ª–µ–π.
            –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!
            (üî∏DoubleCheck: –í –∫–∞—Ä–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: \(user.userCash) —Ä—É–±–ª–µ–π)
            """
        print(report)
    }
    
    func showTopUpAccount(cash: Float) {
        let report = """
            –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, \(user.userName),
            \(DescriptionTypesAvailableOperations.queryTopUpAccount.rawValue)
            –û—Ç –í–∞—Å –ø—Ä–∏–Ω—è—Ç–æ \(cash) —Ä—É–±–ª–µ–π –Ω–∞–ª–∏—á–Ω—ã–º–∏.
            –ù–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º –¥–µ–ø–æ–∑–∏—Ç–µ —É –í–∞—Å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç \(user.userBankDeposit) —Ä—É–±–ª–µ–π.
            –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!
            (üîπDoubleCheck: –í –∫–∞—Ä–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: \(user.userCash) —Ä—É–±–ª–µ–π)
            """
        print(report)
    }
    
    func showError(error: TextErrors) {
        switch error {
        case .wrongLogin:
            print(TextErrors.wrongLogin.rawValue)
        case .wrongPhoneNr:
            print(TextErrors.wrongPhoneNr.rawValue)
        case .notEnoughtCash:
            print(TextErrors.notEnoughtCash.rawValue)
        case .tooLowDeposite:
            print(TextErrors.tooLowDeposite.rawValue)
        case .notEnoughtCashForPhone:
            print(TextErrors.notEnoughtCashForPhone.rawValue)
        case .tooLowDepositeForPhone:
            print(TextErrors.tooLowDepositeForPhone.rawValue)
        }
    }
    
    func checkCurrentUser(userCardId: String, userCardPin: Int) -> Bool {
        return userCardId == user.userCardId && userCardPin == user.userCardPin
    }
    
    func checkUserPhone(phone: String) -> Bool {
        return phone == user.userPhone
    }
    
    func checkMaxUserCash(cash: Float) -> Bool {
        return cash <= user.userCash
    }
    
    func checkMaxAccountDeposit(withdraw: Float) -> Bool {
        return withdraw <= user.userBankDeposit
    }
    
    func topUpPhoneBalanceCash(pay: Float) {
        user.userPhoneBalance += pay
        user.userCash -= pay
    }
    
    func topUpPhoneBalanceDeposit(pay: Float) {
        user.userPhoneBalance += pay
        user.userBankDeposit -= pay
    }
    
    func getCashFromDeposit(cash: Float) {
        user.userCash += cash
        user.userBankDeposit -= cash
    }
    
    func putCashDeposit(topUp: Float) {
        user.userBankDeposit += topUp
        user.userCash -= topUp
    }
}

// –ë–∞–Ω–∫–æ–º–∞—Ç, —Å –∫–æ—Ç–æ—Ä—ã–º –º—ã —Ä–∞–±–æ—Ç–∞–µ–º, –∏–º–µ–µ—Ç –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å sendUserDataToBank
class ATM {
    private let userCardId: String
    private let userCardPin: Int
    private var someBank: BankApi
    private let action: UserActions
    private let paymentMethod: PaymentMethod?
    private var requiredAmount: Float?
    
    init(userCardId: String,
         userCardPin: Int,
         someBank: BankApi,
         action: UserActions,
         paymentMethod: PaymentMethod? = nil
         )
    {
        self.userCardId = userCardId
        self.userCardPin = userCardPin
        self.someBank = someBank
        self.action = action
        self.paymentMethod = paymentMethod
        self.sendUserDataToBank(userCardId: userCardId,
                                userCardPin: userCardPin,
                                actions: action,
                                payment: paymentMethod)
    }
 
    public final func sendUserDataToBank(userCardId: String,
                                         userCardPin: Int,
                                         actions: UserActions,
                                         payment: PaymentMethod?)
    {
        guard someBank.checkCurrentUser(userCardId: userCardId,
                                        userCardPin: userCardPin) else {
            someBank.showError(error: .wrongLogin)
            return
        }
        
        switch actions {
        case .userPressedBalanceBtn:
            someBank.showUserBalance()
            
        case let.userPressedCashWithdrawalBtn(cash: cash):
            guard someBank.checkMaxAccountDeposit(withdraw: cash) else {
                someBank.showError(error: .tooLowDeposite)
                return
            }
            someBank.getCashFromDeposit(cash: cash)
            someBank.showWithdrawalDeposit(cash: cash)
        
        case let.userPressedTopUpBankDepositBtn(cash: cash):
            guard someBank.checkMaxUserCash(cash: cash) else {
                someBank.showError(error: .notEnoughtCash)
                return
            }
            someBank.putCashDeposit(topUp: cash)
            someBank.showTopUpAccount(cash: cash)
            
        case let.userPressedTopUpPhoneBalanceBtn(phoneNumber: phoneNumber,
                                                 payment: payment,
                                                 amount: amount):
            guard someBank.checkUserPhone(phone: phoneNumber) else {
                someBank.showError(error: .wrongPhoneNr)
                return
            }
            
            switch payment {
            case .byCash:
                if someBank.checkMaxUserCash(cash: amount) {
                    someBank.topUpPhoneBalanceCash(pay: amount)
                    someBank.showUserToppedUpMobilePhoneCash(cash: amount)
                } else {
                    someBank.showError(error: .notEnoughtCashForPhone)
                }

            case .fromDeposite:
                if someBank.checkMaxAccountDeposit(withdraw: amount) {
                    someBank.topUpPhoneBalanceDeposit(pay: amount)
                    someBank.showUserToppedUpMobilePhoneDeposite(deposit: amount)
                } else {
                    someBank.showError(error: .tooLowDepositeForPhone)
                }
            }
        }
    }
}


// MARK: - Instances: -
let egor_pupkin: User = User(userName: "Egor Pupkin",
                                 userCardId: "3339 0039 3312 2222",
                                 userCardPin: 1234,
                                 userCash: 2234.34,
                                 userBankDeposit: 4994.40,
                                 userPhone: "+7(889)-393-43-44",
                                 userPhoneBalance: -34.44)

let bankClient = Bank(user: egor_pupkin)



// MARK: - RUN Tests: -
//MARK: -Tests for: .userPressedBalanceBtn is Selected:
print("üèÅTest0Ô∏è‚É£ for: Normal User, .userPressedBalanceBtn is Selected with: Acceptable userData:")
print("üèÅShould print: Deposit balans: 4994.4\n")
let atm443 = ATM(userCardId: "3339 0039 3312 2222",
                 userCardPin: 1234,
                 someBank: bankClient,
                 action: .userPressedBalanceBtn
                 )

print("\nüèÅTest1Ô∏è‚É£ for: Wrong User's userCardId, .userPressedBalanceBtn is Selected with: Wrong userCardId:")
print("üèÅShould print Error: .wrongLogin üü£\n")
let atm445 = ATM(userCardId: "3339 0039 3312 222X",
                 userCardPin: 1234,
                 someBank: bankClient,
                 action: .userPressedBalanceBtn
                 )

print("\nüèÅTest2Ô∏è‚É£ for: Wrong User's userCardPin, .userPressedBalanceBtn is Selected with: Wrong PIN:")
print("üèÅShould print Error: .wrongLogin üü£\n")
let atm444 = ATM(userCardId: "3339 0039 3312 2222",
                 userCardPin: 1238,
                 someBank: bankClient,
                 action: .userPressedBalanceBtn
                 )

//MARK: -Tests for: .userPressedCashWithdrawalBtn is Selected:
print("\nüèÅTest3Ô∏è‚É£ for: .userPressedCashWithdrawalBtn is Selected with: Acceptable amount of cash queried.")
print("üèÅShould print: Deposit balans: 4994.4 - 994 = 4000.4 :")
print("üèÅShould print: Cash balans üî∏DoubleCheck: 2234.34 + 994 = 3228.34 :\n")
let atm450 = ATM(userCardId: "3339 0039 3312 2222",
                 userCardPin: 1234,
                 someBank: bankClient,
                 action: .userPressedCashWithdrawalBtn(cash: 994)
                 )

print("\nüèÅTest4Ô∏è‚É£ for: .userPressedCashWithdrawalBtn is Selected with: TooBIG amount of cash queried.")
print("üèÅShould print Error: .tooLowDeposite üü†\n")
let atm550 = ATM(userCardId: "3339 0039 3312 2222",
                 userCardPin: 1234,
                 someBank: bankClient,
                 action: .userPressedCashWithdrawalBtn(cash: 5000)
                 )

//MARK: -Tests for: .userPressedTopUpBankDepositBtn is Selected:
print("\nüèÅTest5Ô∏è‚É£ for: .userPressedTopUpBankDepositBtn is Selected with: Acceptable amount of cash queried.")
print("üèÅShould print: Balans: 4000.40 + 234.34 = 4234.74 :")
print("üèÅShould print: Cash balans üîπDoubleCheck: Cash: 3228.34 - 234.34 = 2994.00 :\n")
let atm560 = ATM(userCardId: "3339 0039 3312 2222",
                 userCardPin: 1234,
                 someBank: bankClient,
                 action: .userPressedTopUpBankDepositBtn(cash: 234.34)
                 )

print("\nüèÅTest6Ô∏è‚É£ for: .userPressedTopUpBankDepositBtn is Selected with: TooBIG amount of cash queried.")
print("üèÅShould print Error: .notEnoughtCash üü°\n")
let atm660 = ATM(userCardId: "3339 0039 3312 2222",
                 userCardPin: 1234,
                 someBank: bankClient,
                 action: .userPressedTopUpBankDepositBtn(cash: 10000)
                 )

//MARK: -Tests for: .userPressedTopUpPhoneBalanceBtn is Selected:
print("\nüèÅTest7Ô∏è‚É£ for: .userPressedTopUpPhoneBalanceBtn is Selected with: Wrong Phone number.")
print("üèÅShould print Error: .wrongPhoneNr üîµ\n")
let atm760 = ATM(userCardId: "3339 0039 3312 2222",
                 userCardPin: 1234,
                 someBank: bankClient,
                 action: .userPressedTopUpPhoneBalanceBtn(phoneNumber: "Wrong_phoneNr_Here", payment: .byCash, amount: 30)
                 )

print("\nüèÅTest8Ô∏è‚É£ for: .userPressedTopUpPhoneBalanceBtn is Selected")
print("üèÅwith: Payment byCash and NOT enought Cash in pocket")
print("üèÅShould print Error: .notEnoughtCashForPhone üî¥\n")
let atm860 = ATM(userCardId: "3339 0039 3312 2222",
                 userCardPin: 1234,
                 someBank: bankClient,
                 action: .userPressedTopUpPhoneBalanceBtn(phoneNumber: "+7(889)-393-43-44", payment: .byCash, amount: 5000)
                 )

print("\nüèÅTest9Ô∏è‚É£ for: .userPressedTopUpPhoneBalanceBtn is Selected")
print("üèÅwith: Payment byCash and IS enought Cash in pocket")
print("üèÅShould print: Cash balans: 2994.00 - 100 = 2894.00 :")
print("üèÅShould print: Phone balans: -34.44 + 100 = 65.56 :\n")
let atm960 = ATM(userCardId: "3339 0039 3312 2222",
                 userCardPin: 1234,
                 someBank: bankClient,
                 action: .userPressedTopUpPhoneBalanceBtn(phoneNumber: "+7(889)-393-43-44", payment: .byCash, amount: 100)
                 )

print("\nüèÅTest1Ô∏è‚É£0Ô∏è‚É£ for: .userPressedTopUpPhoneBalanceBtn is Selected")
print("üèÅwith: Payment fromDeposite and NOT enought assets on Deposit")
print("üèÅShould print Error: .tooLowDepositeForPhone üü§\n")
let atm1000 = ATM(userCardId: "3339 0039 3312 2222",
                 userCardPin: 1234,
                 someBank: bankClient,
                 action: .userPressedTopUpPhoneBalanceBtn(phoneNumber: "+7(889)-393-43-44", payment: .fromDeposite, amount: 10000)
                 )
//
print("\nüèÅTest1Ô∏è‚É£1Ô∏è‚É£ for: .userPressedTopUpPhoneBalanceBtn is Selected")
print("üèÅwith: Payment fromDeposite and IS enought assets on Deposit")
print("üèÅShould print: Deposit balans: 4234.74 - 100 = 4134.74 :")
print("üèÅShould print: Phone balans: 65.56 + 100 = 165.56 :\n")
let atm1100 = ATM(userCardId: "3339 0039 3312 2222",
                 userCardPin: 1234,
                 someBank: bankClient,
                 action: .userPressedTopUpPhoneBalanceBtn(phoneNumber: "+7(889)-393-43-44", payment: .fromDeposite, amount: 100)
                 )
